
1、日志的概念
日志是一种可以追踪某些软件运行时所发生事件的方法。软件开发人员可以向他们的代码中调用日志记录相关的方法来表明发生了某些事情。
一个事件可以用一个可包含可选变量数据的消息来描述。此外，事件也有重要性的概念，这个重要性也可以被称为严重性级别（level）。

2、日志的作用
通过log的分析，可以方便用户了解系统或软件、应用的运行情况；如果你的应用log足够丰富，也可以分析以往用户的操作行为、类型喜好、地域分布或其他更多信息；
如果一个应用的log同时也分了多个级别，那么可以很轻易地分析得到该应用的健康状况，及时发现问题并快速定位、解决问题，补救损失。
日志的作用可以简单总结为以下3点：
程序调试
了解软件程序运行情况，是否正常
软件程序运行故障分析与问题定位

3、日志字段信息与日志格式
一条日志信息对应的是一个事件的发生，而一个事件通常需要包括以下几个内容：

事件发生时间

事件发生位置

事件的严重程度--日志级别

事件内容

上面这些都是一条日志记录中可能包含的字段信息，当然还可以包括一些其他信息，如进程ID、进程名称、线程ID、线程名称等。日志格式就是用来定义一条日志记录中包含那些字段的，且日志格式通常都是可以自定义的。

4、logging 模块日志的等级
日志等级（level）                     	描述
 DEBUG	                      最详细的日志信息，典型应用场景是 问题诊断
 INFO	                      信息详细程度仅次于DEBUG，通常只记录关键节点信息，用于确认一切都是按照我们预期的那样进行工作
 WARNING	                    当某些不期望的事情发生时记录的信息（如，磁盘可用空间较低），但是此时应用程序还是正常运行的
 ERROR	                      由于一个更严重的问题导致某些功能不能正常运行时记录的信息
 CRITICAL	                  当发生严重错误，导致应用程序不能继续运行时记录的信息
上面列表中的日志等级是从上到下依次升高的，即：DEBUG < INFO < WARNING < ERROR < CRITICAL，而日志的信息量是依次减少的；

开发应用程序或部署开发环境时，可以使用DEBUG或INFO级别的日志获取尽可能详细的日志信息来进行开发或部署调试；
应用上线或部署生产环境时，应该使用WARNING或ERROR或CRITICAL级别的日志来降低机器的I/O压力和提高获取错误日志信息的效率。

5、logging 模块的使用方式介绍
logging模块定义的模块级别的常用函数
       函数	                                                 说明
logging.debug(msg, *args, **kwargs)	               创建一条严重级别为DEBUG的日志记录
logging.info(msg, *args, **kwargs)	                创建一条严重级别为INFO的日志记录
logging.warning(msg, *args, **kwargs)	             创建一条严重级别为WARNING的日志记录
logging.error(msg, *args, **kwargs)	               创建一条严重级别为ERROR的日志记录
logging.critical(msg, *args, **kwargs)            	创建一条严重级别为CRITICAL的日志记录
logging.log(level, *args, **kwargs)               	创建一条严重级别为level的日志记录
logging.basicConfig(**kwargs)	                     对root logger进行一次性配置

其中logging.basicConfig(**kwargs)函数用于指定“要记录的日志级别”、“日志格式”、“日志输出位置”、“日志文件的打开模式”等信息，其他几个都是用于记录各个级别日志的函数。
默认情况下Python的logging模块将日志打印到了标准输出中，且只显示了大于等于WARNING级别的日志，这说明默认的日志级别设置为WARNING

6、日志的简单配置
例子：
import logging
logging.debug("debug_msg")
logging.info("info_msg")
logging.warning("warning_msg")
logging.error("error_msg")
logging.critical("critical_msg")
输出：
WARNING:root:warning_msg
ERROR:root:error_msg
CRITICAL:root:critical_msg

logging.basicConfig()函数包含参数说明
 参数名称                                     	描述
filename	                        指定日志输出目标文件的文件名（可以写文件名也可以写文件的完整的绝对路径，写文件名日志放执行文件目录下，写完整路径按照完整路径生成日志文件），指定该设置项后日志信心就不会被输出到控制台了
filemode	                        指定日志文件的打开模式，默认为'a'。需要注意的是，该选项要在filename指定时才有效
format	                          指定日志格式字符串，即指定日志输出时所包含的字段信息以及它们的顺序。logging模块定义的格式字段下面会列出。
datefmt	                         指定日期/时间格式。需要注意的是，该选项要在format中包含时间字段%(asctime)s时才有效
level	                           指定日志器的日志级别
stream	                          指定日志输出目标stream，如sys.stdout、sys.stderr以及网络stream。需要说明的是，stream和filename不能同时提供，否则会引发 ValueError异常
style	                           Python 3.2中新添加的配置项。指定format格式字符串的风格，可取值为'%'、'{'和'$'，默认为'%'
handlers	                        Python 3.3中新添加的配置项。该选项如果被指定，它应该是一个创建了多个Handler的可迭代对象，这些handler将会被添加到root logger。需要说明的是：filename、stream和handlers这三个配置项只能有一个存在，不能同时出现2个或3个，否则会引发ValueError异常。

logging模块中定义好的可以用于format格式字符串说明
字段/属性名称	             使用格式	                                   描述
asctime	                 %(asctime)s	            将日志的时间构造成可读的形式，默认情况下是‘2016-02-08 12:00:00,123’精确到毫秒
name	                    %(name)s	             所使用的日志器名称，默认是'root'，因为默认使用的是 rootLogger
filename                	%(filename)s	         调用日志输出函数的模块的文件名； pathname的文件名部分，包含文件后缀
funcName                	%(funcName)s	         由哪个function发出的log， 调用日志输出函数的函数名
levelname	               %(levelname)s         	日志的最终等级（被filter修改后的）
message                 	%(message)s	          日志信息， 日志记录的文本内容
lineno	                  %(lineno)d	           当前日志的行号， 调用日志输出函数的语句所在的代码行
levelno	                 %(levelno)s	          该日志记录的数字形式的日志级别（10, 20, 30, 40, 50）
pathname	                 %(pathname)s	        完整路径 ，调用日志输出函数的模块的完整路径名，可能没有
process	                  %(process)s	         当前进程， 进程ID。可能没有
processName	            %(processName)s	       进程名称，Python 3.1新增
thread	                 %(thread)s	            当前线程， 线程ID。可能没有
threadName             	%(thread)s	             线程名称
module	                 %(module)s	            调用日志输出函数的模块名， filename的名称部分，不包含后缀即不包含文件后缀的文件名
created	                %(created)f	           当前时间，用UNIX标准的表示时间的浮点数表示； 日志事件发生的时间--时间戳，就是当时调用time.time()函数返回的值
relativeCreated	        %(relativeCreated)d	   输出日志信息时的，自Logger创建以 来的毫秒数； 日志事件发生的时间相对于logging模块加载时间的相对毫秒数
msecs	                  %(msecs)d	             日志事件发生事件的毫秒部分。logging.basicConfig()中用了参数datefmt，将会去掉asctime中产生的毫秒部分，可以用这个加上


案例：
1、
import  logging
logging.basicConfig(level=logging.DEBUG,
                    format="%(lineno)d %(asctime)s %(name)s %(levelname)s %(message)s ",
                    datefmt = '%Y-%m-%d %H:%M:%S %a',
                    filename=r"./mao.log")
logging.debug('debug_msg')
logging.info('info_msg')
logging.warning('warning_msg')
logging.error('error_msg')
logging.critical('critical_msg')



2、
import logging
LOG_FORMAT = "%(asctime)s %(name)s %(levelname)s %(pathname)s %(message)s "#配置输出日志格式
DATE_FORMAT = '%Y-%m-%d  %H:%M:%S %a ' #配置输出时间的格式，注意月份和天数不要搞乱了
logging.basicConfig(level=logging.DEBUG,
                    format=LOG_FORMAT,
                    datefmt = DATE_FORMAT ,
                    filename=r"./test.log" #有了filename参数就不会直接输出显示到控制台，而是直接写入文件
                    )
logging.debug("msg1")
logging.info("msg2")
logging.warning("msg3")
logging.error("msg4")
logging.critical("msg5")



7、日志流处理流程



























