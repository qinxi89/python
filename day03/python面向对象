python 面向对象：

类(Class): 
用来描述具有相同的属性和方法的对象的集合。它定义了该集合中每个对象所共有的属性和方法。对象是类的实例。
类变量：
类变量在整个实例化的对象中是公用的。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
数据成员：
类变量或者实例变量, 用于处理类及其实例对象的相关的数据。
方法重写：
如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（override），也称为方法的重写。
局部变量：
定义在方法中的变量，只作用于当前实例的类。
实例变量：
在类的声明中，属性是用变量来表示的。这种变量就称为实例变量，是在类声明的内部但是在类的其他成员方法之外声明的。
继承：
即一个派生类（derived class）继承基类（base class）的字段和方法。继承也允许把一个派生类的对象作为一个基类对象对待。例如，有这样一个设计：一个Dog类型的对象派生自Animal类，这是模拟"是一个（is-a）"关系（例图，Dog是一个Animal）。
实例化：
创建一个类的实例，类的具体对象。
方法：
类中定义的函数。
对象：
通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。


################################################   创建类   ####################################################
使用 class 语句来创建一个新类，class 之后为类的名称并以冒号结尾:
class ClassName:
   '类的帮助信息'   #类文档字符串
   class_suite  #类体
   
类的帮助信息可以通过ClassName.__doc__查看。
class_suite 由类成员，方法，数据属性组成。

例子：
class Employee:
     empCount = 0
     def __init__(self, name , salary):
         self.name = name
         self.salary = salary
         Employee.empCount += 1
     def displayCount(self):
         print("Total Employee %d" % Employee.empCount)

     def displayEmployee(self):
         print("Name:",self.name, "Salary:", self.salary)
注：
empCount 变量是一个类变量，它的值将在这个类的所有实例之间共享。你可以在内部类或外部类使用 Employee.empCount 访问。
第一种方法__init__()方法是一种特殊的方法，被称为类的构造函数或初始化方法，当创建了这个类的实例时就会调用该方法
self 代表类的实例，self 在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。
############################################### 创建实例 ######################################################
1、访问属性


2、python内置类属性

3、python对象销毁（垃圾回收）


################################################   类的的继承   ###############################################




###############################################   方法重写 ################################################

1、基础重载方法


2、运算符重载

##############################################  类属性与方法   ############################################

1、类的私有属性

2、类的方法

3、类的私有方法


4、单下划线，双下划线，头尾双下划线说明：























