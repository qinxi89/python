
#################################################### 单下划线  #################################################
1、单下划线用作变量
最常见的一种使用场景是作为变量占位符，使用场景明显可以减少代码中多余变量的使用。为了方便理解，_可以看作被丢弃的变量名称，这样做可以让阅读你代码的人知道，
这是个不会被使用的变量。

例如：for _, _, filenames in os.walk(targetDir):
  print(filenames)
   
for _ in range(100):
  print('PythonPoint')

2、单下划线前缀名称(例如_pythonPoint)
这表示这是一个保护成员（属性或者方法），只有类对象和子类对象自己能访问到这些变量，是用来指定私有变量和方法的一种方式(约定而已)。
如果使用from a_module import *导入时，这部分变量和函数不会被导入。不过值得注意的是，如果使用import a_module这样导入模块，
仍然可以用a_module._pythonPoint这样的形式访问到这样的对象。
另外单下划线开头还有一种一般不会用到的情况，例如使用一个C编写的扩展库有时会用下划线开头命名，然后使用一个去掉下划线的Python模块进行包装。
如struct这个模块实际上是C模块_struct的一个Python包装。

3、单下划线后缀名称
通常用于和Python关键词区分开来，比如我们需要一个变量叫做class，但class是Python的关键词，就可以以单下划线结尾写作class_。


##################################################  双下划线  #################################################
1、双下划线前缀名称
这表示这是一个私有成员（属性或者方法）。它无法直接像公有成员一样随便访问。双下划线开头的命名形式在Python的类成员中使用表示名字改编，
即如果Test类里有一成员__x，那么dir(Test)时会看到_Test__x而非__x。这是为了避免该成员的名称与子类中的名称冲突，方便父类和子类中该成员的区分识别。
但要注意这要求该名称末尾最多有一个下划线。e.g.



2、双下划线前缀及后缀名称

一种约定，Python内部的名字，用来区别其他用户自定义的命名,以防冲突。是一些Python的“魔术”对象，表示这是一个特殊成员。
如类成员的__init__、__del__、__add__等，以及全局的__file__、__name__等。Python官方推荐永远不要将这样的命名方式应用于自己的变量或函数，
而是按照文档说明来使用Python内置的这些特殊成员。














